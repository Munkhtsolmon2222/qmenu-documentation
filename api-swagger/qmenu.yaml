openapi: 3.0.0
info:
  title: QMenu API
  description: |
    QMenu API provides endpoints for managing restaurant operations including menu items, orders, tables, and more.
  version: 1.0.0
  contact:
    name: QMenu Support
    email: info@qmenu.mn
    url: https://www.qmenu.mn

servers:
  - url: https://api.qmenu.mn/v1
    description: Production server
  - url: https://staging-api.qmenu.mn/v1
    description: Staging server

tags:
  - name: Menu
    description: Menu management endpoints
  - name: Orders
    description: Order management endpoints
  - name: Tables
    description: Table management endpoints
  - name: Authentication
    description: Authentication and authorization endpoints

paths:
  /menu/items:
    get:
      tags:
        - Menu
      summary: Get all menu items
      description: Retrieve a list of all menu items
      parameters:
        - name: category
          in: query
          description: Filter items by category
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuItem'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    post:
      tags:
        - Orders
      summary: Create a new order
      description: Create a new order with items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tables:
    get:
      tags:
        - Tables
      summary: Get all tables
      description: Retrieve a list of all tables and their status
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    MenuItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        image:
          type: string
          format: uri
        isAvailable:
          type: boolean
        allergens:
          type: array
          items:
            type: string
      required:
        - id
        - name
        - price
        - category

    OrderRequest:
      type: object
      properties:
        tableId:
          type: string
          format: uuid
        items:
          type: array
          items:
            type: object
            properties:
              menuItemId:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1
            required:
              - menuItemId
              - quantity
        notes:
          type: string
      required:
        - tableId
        - items

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tableId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          type: string
          enum: [pending, preparing, ready, completed, cancelled]
        total:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - tableId
        - items
        - status
        - total

    OrderItem:
      type: object
      properties:
        menuItem:
          $ref: '#/components/schemas/MenuItem'
        quantity:
          type: integer
        price:
          type: number
          format: float
        notes:
          type: string
      required:
        - menuItem
        - quantity
        - price

    Table:
      type: object
      properties:
        id:
          type: string
          format: uuid
        number:
          type: string
        capacity:
          type: integer
        status:
          type: string
          enum: [available, occupied, reserved]
        currentOrderId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - number
        - capacity
        - status

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
      required:
        - code
        - message

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 